/*
 * Sahu.js ফাইলের সম্পূর্ণ পাঠযোগ্য (de-obfuscated) এবং নির্ভুল ভার্সন।
 * এই কোডটি একটি লঞ্চার বা মনিটর হিসেবে কাজ করে, যা মূল বট ফাইলটিকে (Main.js) চালু রাখে।
 */

// ===============================================================
// ১. প্রয়োজনীয় মডিউলগুলো নিয়ে আসা হচ্ছে (Importing modules)
// ===============================================================

const { spawn } = require("child_process"); // অন্য জাভাস্ক্রিপ্ট ফাইল চালানোর জন্য (বট চালু করতে)
const axios = require("axios"); // ইন্টারনেট থেকে ডেটা আনার জন্য (আপডেট চেক করতে)
const logger = require("./utils/log"); // কনসোলে সুন্দরভাবে মেসেজ দেখানোর জন্য
const express = require("express"); // ওয়েব সার্ভার তৈরির জন্য
const path = require("path"); // ফাইলের পাথ বা অবস্থান নিয়ে কাজ করার জন্য

// ===============================================================
// ২. ওয়েব সার্ভার সেটআপ করা
// ===============================================================

const app = express(); // express অ্যাপ তৈরি করা হলো
const port = process.env.PORT || 8080; // হোস্টিং প্ল্যাটফর্মের দেওয়া PORT অথবা লোকাল মেশিনের জন্য 8080 পোর্ট ব্যবহার করা হবে

// এই অংশটি শুধু বটকে অনলাইনে সচল রাখার জন্য একটি ওয়েব সার্ভার তৈরি করে
app.get("/", (req, res) => {
  // কেউ যদি ওয়েবসাইটের মূল ঠিকানায় আসে, তাকে index.html ফাইলটি দেখানো হবে
  res.sendFile(path.join(__dirname, "/index.html"));
});

// সার্ভারটি নির্দিষ্ট পোর্টে চালু করা হচ্ছে
app
  .listen(port, () => {
    logger(`সার্ভার চালু হয়েছে এবং ${port} পোর্টে চলছে`, "[ সার্ভার ]");
  })
  .on("error", (err) => {
    // সার্ভার চালু করতে কোনো সমস্যা হলে, সেটি এখানে দেখানো হবে
    if (err.code === "EACCES") {
      logger(`পোর্ট ${port} ব্যবহারে অনুমতি পাওয়া যায়নি।`, "[ সার্ভার এরর ]");
    } else {
      logger(`একটি অপ্রত্যাশিত এরর হয়েছে: ${err.message}`, "[ সার্ভার এরর ]");
    }
  });

// ===============================================================
// ৩. বট স্বয়ংক্রিয়ভাবে রিস্টার্ট করার ফাংশন
// ===============================================================

// একটি গ্লোবাল ভেরিয়েবল, যা হিসাব রাখে বট কতবার রিস্টার্ট হলো
global.countRestart = 0;

// বট চালু করার মূল ফাংশন
function startBot(message) {
  if (message) {
    logger(message, "[ বট চালু হচ্ছে ]");
  }

  // 'node Main.js' কমান্ডটি চালিয়ে বটটিকে একটি নতুন প্রসেসে চালু করা হচ্ছে
  const botProcess = spawn(
    "node", // কমান্ড
    ["Main.js", "--trace-warnings", "--async-stack-traces"], // আর্গুমেন্ট
    {
      cwd: __dirname, // বর্তমান ডিরেক্টরিতে কমান্ডটি চালাও
      stdio: "inherit", // বটের সব আউটপুট এই কনসোলে দেখাও
      shell: true,
    }
  );

  // বট প্রসেসটি যখন বন্ধ হয়ে যাবে, তখন কী করতে হবে তা এখানে বলা আছে
  botProcess.on("close", (code) => {
    // 'code' হলো এক্সিট কোড। 0 মানে স্বাভাবিকভাবে বন্ধ হয়েছে, অন্য কিছু মানে ক্র্যাশ করেছে।
    if (code !== 0 && global.countRestart < 5) {
      // যদি বট ক্র্যাশ করে এবং ৫ বারের কম রিস্টার্ট হয়ে থাকে
      global.countRestart++;
      logger(
        `বট বন্ধ হয়ে গেছে। কোড: ${code}। রিস্টার্ট হচ্ছে... (${global.countRestart}/5)`,
        "[ রিস্টার্ট ]"
      );
      // বটটি আবার চালু করার জন্য ফাংশনটিকে আবার কল করা হলো
      startBot();
    } else if (global.countRestart >= 5) {
      // যদি ৫ বার চেষ্টার পরেও বট চালু না হয়
      logger("৫ বার রিস্টার্ট করার পরেও বট চালু করা যায়নি।", "[ বন্ধ ]");
    }
  });

  // বট চালু হওয়ার সময় কোনো এরর হলে, তা এখানে ধরা হবে
  botProcess.on("error", (error) => {
    logger(
      `বট চালু হতে একটি এরর হয়েছে: ${JSON.stringify(error)}`,
      "[ বট এরর ]"
    );
  });
}

// ===============================================================
// ৪. বট চালু করার আগে সর্বশেষ তথ্য যাচাই
// ===============================================================

axios
  .get(
    "https://raw.githubusercontent.com/shahadat-sahu/SHAHADAT-CHAT-BOT/main/package.json"
  )
  .then((res) => {
    // যদি গিটহাব থেকে সফলভাবে তথ্য আনা যায়
    logger(res.data.name, "[ বটের নাম ]");
    logger("ভার্সন: " + res.data.version, "[ ভার্সন ]");
    logger(res.data.description, "[ বর্ণনা ]");
  })
  .catch((err) => {
    // যদি তথ্য আনতে কোনো সমস্যা হয়
    logger("আপডেট তথ্য আনতে ব্যর্থ: " + err.message, "[ আপডেট এরর ]");
  })
  .finally(() => {
    // উপরের কাজ সফল হোক বা ব্যর্থ, সবশেষে এই কাজটি হবেই
    // এবার মূল বটটিকে চালু করা হচ্ছে
    startBot();
  });
